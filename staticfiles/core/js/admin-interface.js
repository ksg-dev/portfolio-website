// core/static/core/js/admin-interface.js
document.addEventListener('DOMContentLoaded', function() {
    initializeAdminInterface();
});

function initializeAdminInterface() {
    // Initialize tooltips
    initializeTooltips();
    
    // Initialize alert dismissal
    initializeAlerts();
    
    // Initialize form enhancements
    initializeFormEnhancements();
    
    // Initialize auto-save functionality
    initializeAutoSave();
}

function initializeTooltips() {
    const tooltipElements = document.querySelectorAll('[data-toggle="tooltip"]');
    tooltipElements.forEach(element => {
        element.addEventListener('mouseenter', function() {
            showTooltip(this);
        });
        
        element.addEventListener('mouseleave', function() {
            hideTooltip(this);
        });
    });
}

function showTooltip(element) {
    const tooltipText = element.getAttribute('title') || element.getAttribute('data-title');
    if (!tooltipText) return;
    
    const tooltip = document.createElement('div');
    tooltip.className = 'admin-tooltip';
    tooltip.textContent = tooltipText;
    tooltip.id = 'tooltip-' + Date.now();
    
    document.body.appendChild(tooltip);
    
    const rect = element.getBoundingClientRect();
    tooltip.style.left = rect.left + (rect.width / 2) - (tooltip.offsetWidth / 2) + 'px';
    tooltip.style.top = rect.top - tooltip.offsetHeight - 8 + 'px';
    
    element.setAttribute('data-tooltip-id', tooltip.id);
    
    setTimeout(() => tooltip.classList.add('show'), 10);
}

function hideTooltip(element) {
    const tooltipId = element.getAttribute('data-tooltip-id');
    if (tooltipId) {
        const tooltip = document.getElementById(tooltipId);
        if (tooltip) {
            tooltip.classList.remove('show');
            setTimeout(() => tooltip.remove(), 200);
        }
        element.removeAttribute('data-tooltip-id');
    }
}

function initializeAlerts() {
    const closeButtons = document.querySelectorAll('.alert-close');
    closeButtons.forEach(button => {
        button.addEventListener('click', function() {
            const alert = this.closest('.alert');
            if (alert) {
                alert.style.opacity = '0';
                alert.style.transform = 'translateY(-10px)';
                setTimeout(() => alert.remove(), 300);
            }
        });
    });
    
    // Auto-dismiss success messages after 5 seconds
    const successAlerts = document.querySelectorAll('.alert-success');
    successAlerts.forEach(alert => {
        setTimeout(() => {
            const closeBtn = alert.querySelector('.alert-close');
            if (closeBtn) closeBtn.click();
        }, 5000);
    });
}

function initializeFormEnhancements() {
    // Auto-generate slugs
    initializeSlugGeneration();
    
    // Enhanced select boxes
    initializeSelectEnhancements();
    
    // Character counters
    initializeCharacterCounters();
    
    // Form validation
    initializeFormValidation();
}

function initializeSlugGeneration() {
    const titleInputs = document.querySelectorAll('input[name="title"], input[name="name"]');
    const slugInputs = document.querySelectorAll('input[name="slug"]');
    
    titleInputs.forEach((titleInput, index) => {
        const slugInput = slugInputs[index];
        if (!slugInput) return;
        
        titleInput.addEventListener('input', function() {
            if (!slugInput.value || slugInput.dataset.autoGenerated === 'true') {
                const slug = generateSlug(this.value);
                slugInput.value = slug;
                slugInput.dataset.autoGenerated = 'true';
            }
        });
        
        slugInput.addEventListener('input', function() {
            this.dataset.autoGenerated = 'false';
        });
    });
}

function generateSlug(text) {
    return text
        .toLowerCase()
        .replace(/[^\w\s-]/g, '')
        .replace(/\s+/g, '-')
        .replace(/-+/g, '-')
        .trim('-');
}

function initializeSelectEnhancements() {
    const selects = document.querySelectorAll('select');
    selects.forEach(select => {
        select.addEventListener('change', function() {
            this.classList.add('selected');
        });
        
        if (select.value) {
            select.classList.add('selected');
        }
    });
}

function initializeCharacterCounters() {
    const textareas = document.querySelectorAll('textarea[maxlength]');
    textareas.forEach(textarea => {
        const maxLength = parseInt(textarea.getAttribute('maxlength'));
        const counter = document.createElement('div');
        counter.className = 'character-counter';
        
        const updateCounter = () => {
            const remaining = maxLength - textarea.value.length;
            counter.textContent = `${remaining} characters remaining`;
            counter.className = 'character-counter' + (remaining < 20 ? ' warning' : '');
        };
        
        textarea.parentNode.insertBefore(counter, textarea.nextSibling);
        textarea.addEventListener('input', updateCounter);
        updateCounter();
    });
}

function initializeFormValidation() {
    const forms = document.querySelectorAll('form');
    forms.forEach(form => {
        form.addEventListener('submit', function(e) {
            if (!validateForm(this)) {
                e.preventDefault();
                showFormErrors();
            }
        });
    });
}

function validateForm(form) {
    let isValid = true;
    const requiredFields = form.querySelectorAll('[required]');
    
    requiredFields.forEach(field => {
        if (!field.value.trim()) {
            markFieldAsError(field, 'This field is required');
            isValid = false;
        } else {
            clearFieldError(field);
        }
    });
    
    return isValid;
}

function markFieldAsError(field, message) {
    const container = field.closest('.field-container');
    if (container) {
        container.classList.add('field-error');
        
        let errorDiv = container.querySelector('.field-errors');
        if (!errorDiv) {
            errorDiv = document.createElement('div');
            errorDiv.className = 'field-errors';
            container.appendChild(errorDiv);
        }
        
        errorDiv.innerHTML = `
            <div class="error-message">
                <i class="fas fa-exclamation-circle"></i>
                ${message}
            </div>
        `;
    }
}

function clearFieldError(field) {
    const container = field.closest('.field-container');
    if (container) {
        container.classList.remove('field-error');
        const errorDiv = container.querySelector('.field-errors');
        if (errorDiv) errorDiv.remove();
    }
}

function showFormErrors() {
    const firstError = document.querySelector('.field-error');
    if (firstError) {
        firstError.scrollIntoView({ behavior: 'smooth', block: 'center' });
    }
}

function initializeAutoSave() {
    const forms = document.querySelectorAll('form[data-autosave="true"]');
    forms.forEach(form => {
        const inputs = form.querySelectorAll('input, textarea, select');
        let saveTimeout;
        
        inputs.forEach(input => {
            input.addEventListener('input', function() {
                clearTimeout(saveTimeout);
                showAutoSaveIndicator('saving');
                
                saveTimeout = setTimeout(() => {
                    autoSaveForm(form);
                }, 2000);
            });
        });
    });
}

function autoSaveForm(form) {
    const formData = new FormData(form);
    const url = form.getAttribute('data-autosave-url') || form.action;
    
    fetch(url, {
        method: 'POST',
        body: formData,
        headers: {
            'X-Requested-With': 'XMLHttpRequest',
            'X-CSRFToken': getCsrfToken()
        }
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            showAutoSaveIndicator('saved');
        } else {
            showAutoSaveIndicator('error');
        }
    })
    .catch(() => {
        showAutoSaveIndicator('error');
    });
}

function showAutoSaveIndicator(status) {
    let indicator = document.querySelector('.autosave-indicator');
    if (!indicator) {
        indicator = document.createElement('div');
        indicator.className = 'autosave-indicator';
        document.body.appendChild(indicator);
    }
    
    const messages = {
        saving: '<i class="fas fa-spinner fa-spin"></i> Saving...',
        saved: '<i class="fas fa-check"></i> Saved',
        error: '<i class="fas fa-exclamation-triangle"></i> Save failed'
    };
    
    indicator.innerHTML = messages[status];
    indicator.className = `autosave-indicator ${status}`;
    indicator.style.display = 'block';
    
    if (status === 'saved') {
        setTimeout(() => {
            indicator.style.display = 'none';
        }, 2000);
    }
}

function getCsrfToken() {
    const token = document.querySelector('[name=csrfmiddlewaretoken]');
    return token ? token.value : '';
}
